{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79152\\\\\\u0423\\u043D\\u0438\\u0432\\u0435\\u0440\\\\3\\u043A\\u0443\\u0440\\u0441\\\\\\u0422\\u041A\\u041F3\\u043A1\\u0441\\\\4 \\u0432 \\u0440\\u044F\\u0434\\\\course-work\\\\client\\\\src\\\\pages\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Context } from \"../index\";\nimport Square from '../components/Square';\nimport '../css/GameComponents.css';\nimport { createGame, getGamesByUser } from '../http/userAPI';\nimport { calculateWinner, getNextStep, getRandomInt } from './GameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const {\n    user\n  } = useContext(Context);\n  const [board, setBoard] = useState(Array(25).fill(null)); // Измените размер доски на 20\n\n  const [countStep, setCount] = useState(0);\n  const winner = calculateWinner(board);\n\n  const buttonClick = index => {\n    const boardCopy = [...board];\n    let step = 0; // Проверка, находится ли выбранная клетка на нижней линии или над клеткой, где уже стоит крестик\n\n    if (winner || boardCopy[index] || index < 5 && boardCopy[index + 5] || index >= 5 && boardCopy[index - 5]) return;\n    boardCopy[index] = 'x';\n    step++;\n    const tmpwinner = calculateWinner(boardCopy);\n\n    if (tmpwinner === null && countStep < 19) {\n      // Измените количество ходов на 19\n      index = getNextStep(boardCopy);\n      boardCopy[index] = 'o';\n      step++;\n    }\n\n    setCount(countStep + step);\n    setBoard(boardCopy); //еще одна проверка на конец игры для записи в таблицу\n\n    const lasttmpwinner = calculateWinner(boardCopy);\n\n    if (lasttmpwinner !== null || countStep >= 19) {\n      // Измените количество ходов на 19\n      try {\n        let bwinner = lasttmpwinner === 'x' ? true : false;\n        let time = getRandomInt(2, 30);\n        let data = createGame(bwinner, time, user.id);\n        this.updateGames();\n      } catch (e) {\n        alert(e.response.data.message);\n      }\n    }\n  };\n\n  const startNewGame = () => {\n    setBoard(Array(25).fill(null)); // Измените размер доски на 20\n\n    setCount(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"black_back\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      variant: \"outline-light\",\n      className: \"start__btn\",\n      onClick: () => startNewGame(),\n      children: \"\\u0421\\u041E\\u0411\\u0415\\u0420\\u0418 5!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((square, i) => /*#__PURE__*/_jsxDEV(Square, {\n        value: square,\n        onClick: () => buttonClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game__info\",\n      children: [\" \", winner ? \"[ WIN \" + winner + \" ! ]\" : countStep === 16 ? \"[ DRAW ! ]\" : \"[ YOU TURN ]\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 4\n  }, this);\n};\n\n_s(Game, \"LCCkTsyDv9nmJdbsVzDle+TwtIw=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/79152/Универ/3курс/ТКП3к1с/4 в ряд/course-work/client/src/pages/Game.js"],"names":["React","useContext","useState","Context","Square","createGame","getGamesByUser","calculateWinner","getNextStep","getRandomInt","Game","user","board","setBoard","Array","fill","countStep","setCount","winner","buttonClick","index","boardCopy","step","tmpwinner","lasttmpwinner","bwinner","time","data","id","updateGames","e","alert","response","message","startNewGame","map","square","i"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport {Context} from \"../index\";\r\nimport Square from '../components/Square';\r\nimport '../css/GameComponents.css'\r\nimport { createGame, getGamesByUser } from '../http/userAPI';\r\nimport { calculateWinner, getNextStep, getRandomInt } from './GameUtils';\r\n\r\nconst Game = () => {\r\n const { user } = useContext(Context)\r\n const [board, setBoard] = useState(Array(25).fill(null)) // Измените размер доски на 20\r\n const [countStep, setCount] = useState(0)\r\n const winner = calculateWinner(board)\r\n\r\n const buttonClick = (index) => {\r\n  const boardCopy = [...board]\r\n  let step = 0;\r\n \r\n  // Проверка, находится ли выбранная клетка на нижней линии или над клеткой, где уже стоит крестик\r\n  if (winner || boardCopy[index] || (index < 5 && boardCopy[index + 5]) || (index >= 5 && boardCopy[index - 5])) return;\r\n  boardCopy[index] = 'x'\r\n  step++\r\n \r\n  const tmpwinner = calculateWinner(boardCopy)\r\n  if (tmpwinner === null && countStep < 19) { // Измените количество ходов на 19\r\n    index = getNextStep(boardCopy)\r\n    boardCopy[index] = 'o'\r\n    step++\r\n  }\r\n \r\n  setCount(countStep + step)\r\n  setBoard(boardCopy)\r\n \r\n  //еще одна проверка на конец игры для записи в таблицу\r\n  const lasttmpwinner = calculateWinner(boardCopy)\r\n  if (lasttmpwinner !== null || countStep >= 19){ // Измените количество ходов на 19\r\n    try {\r\n      let bwinner = lasttmpwinner === 'x' ? true : false;\r\n      let time = getRandomInt(2, 30);\r\n      let data = createGame(bwinner, time, user.id)\r\n      this.updateGames()\r\n    } catch (e) {\r\n      alert(e.response.data.message)\r\n    }\r\n  }\r\n }\r\n  \r\n \r\n const startNewGame = () => {\r\n   setBoard(Array(25).fill(null)) // Измените размер доски на 20\r\n   setCount(0)\r\n }\r\n\r\n return (\r\n   <div className='black_back'>\r\n\r\n     <button\r\n       variant={\"outline-light\"}\r\n       className=\"start__btn\"\r\n       onClick={() => startNewGame()}>СОБЕРИ 5!</button>\r\n\r\n     <div className=\"board\">\r\n     {\r\n       board.map((square, i) => (\r\n         <Square\r\n           key={i}\r\n           value={square}\r\n           onClick={() => buttonClick(i)} />\r\n       ))\r\n       }\r\n      \r\n     </div>\r\n\r\n     <div className='game__info'> {winner ? \"[ WIN \" + winner + \" ! ]\"\r\n       :\r\n       (countStep === 16) ? \"[ DRAW ! ]\" : \"[ YOU TURN ]\"} </div> \r\n   </div>\r\n );\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}