{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useValidation = (value, validations) => {\n  _s();\n\n  const [isEmpty, setEmpty] = useState(true);\n  const [minLengthError, setMinLengthError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [inputValid, setInputValid] = useState(false);\n  useEffect(() => {\n    for (const validation in validations) {\n      switch (validation) {\n        case 'minLength':\n          value.length < validations[validation] ? setMinLengthError(true) : setMinLengthError(false);\n          break;\n\n        case 'isEmpty':\n          value ? setEmpty(false) : setEmpty(true);\n          break;\n\n        case 'isEmail':\n          const re = /\\S+@\\S+\\.\\S+/;\n          re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true);\n          break;\n      }\n    }\n  }, [value]);\n  useEffect(() => {\n    if (isEmpty || minLengthError || emailError) setInputValid(false);else {\n      setInputValid(true);\n    }\n  }, [isEmpty, minLengthError, emailError]);\n  return {\n    isEmpty,\n    minLengthError,\n    emailError,\n    inputValid\n  };\n};\n\n_s(useValidation, \"L/bdn5W5lRlZjjvbLdxGi1Ayzmw=\");\n\nexport const useInput = (initialValue, validations) => {\n  _s2();\n\n  const [value, setValue] = useState(initialValue);\n  const [isDirty, setDirty] = useState(false);\n  const valid = useValidation(value, validations);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const onBlur = e => {\n    setDirty(true);\n  };\n\n  return {\n    value,\n    onChange,\n    onBlur,\n    isDirty,\n    ...valid\n  };\n};\n\n_s2(useInput, \"ROXCByPZsuh/SPOaQe5dG6oyq/A=\", false, function () {\n  return [useValidation];\n});\n\nconst Validation = () => {};\n\n_c = Validation;\nexport default Validation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"sources":["C:/Users/79152/Универ/3курс/ТКП3к1с/4 в ряд/course-work/client/src/components/Validation.js"],"names":["useState","useEffect","useValidation","value","validations","isEmpty","setEmpty","minLengthError","setMinLengthError","emailError","setEmailError","inputValid","setInputValid","validation","length","re","test","String","toLowerCase","useInput","initialValue","setValue","isDirty","setDirty","valid","onChange","e","target","onBlur","Validation"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAmC,OAAnC;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAAA;;AACjD,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AAGAC,EAAAA,SAAS,CAAE,MAAM;AACb,SAAK,MAAMY,UAAX,IAAyBT,WAAzB,EAAsC;AAClC,cAAQS,UAAR;AACI,aAAK,WAAL;AACIV,UAAAA,KAAK,CAACW,MAAN,GAAeV,WAAW,CAACS,UAAD,CAA1B,GAAyCL,iBAAiB,CAAC,IAAD,CAA1D,GAAmEA,iBAAiB,CAAC,KAAD,CAApF;AACA;;AACJ,aAAK,SAAL;AACIL,UAAAA,KAAK,GAAGG,QAAQ,CAAC,KAAD,CAAX,GAAqBA,QAAQ,CAAC,IAAD,CAAlC;AACA;;AACJ,aAAK,SAAL;AACI,gBAAMS,EAAE,GAAG,cAAX;AACAA,UAAAA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACd,KAAD,CAAN,CAAce,WAAd,EAAR,IAAuCR,aAAa,CAAC,KAAD,CAApD,GAA8DA,aAAa,CAAC,IAAD,CAA3E;AACA;AAVR;AAYH;AACJ,GAfQ,EAeN,CAACP,KAAD,CAfM,CAAT;AAiBAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,OAAO,IAAIE,cAAX,IAA6BE,UAAjC,EACIG,aAAa,CAAC,KAAD,CAAb,CADJ,KAEK;AACGA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACR,GANQ,EAMN,CAACP,OAAD,EAAUE,cAAV,EAA0BE,UAA1B,CANM,CAAT;AAQA,SAAO;AACHJ,IAAAA,OADG;AAEHE,IAAAA,cAFG;AAGHE,IAAAA,UAHG;AAIHE,IAAAA;AAJG,GAAP;AAMH,CAtCM;;GAAMT,a;;AAwCb,OAAO,MAAMiB,QAAQ,GAAG,CAACC,YAAD,EAAehB,WAAf,KAA+B;AAAA;;AACnD,QAAM,CAACD,KAAD,EAAQkB,QAAR,IAAoBrB,QAAQ,CAACoB,YAAD,CAAlC;AACA,QAAM,CAACE,OAAD,EAAUC,QAAV,IAAsBvB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMwB,KAAK,GAAGtB,aAAa,CAACC,KAAD,EAAQC,WAAR,CAA3B;;AAEA,QAAMqB,QAAQ,GAAIC,CAAD,IAAO;AACpBL,IAAAA,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASxB,KAAV,CAAR;AACH,GAFD;;AAIA,QAAMyB,MAAM,GAAIF,CAAD,IAAO;AAClBH,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIA,SAAO;AACHpB,IAAAA,KADG;AAEHsB,IAAAA,QAFG;AAGHG,IAAAA,MAHG;AAIHN,IAAAA,OAJG;AAKH,OAAGE;AALA,GAAP;AAOH,CApBM;;IAAML,Q;UAGKjB,a;;;AAkBlB,MAAM2B,UAAU,GAAG,MAAM,CAExB,CAFD;;KAAMA,U;AAIN,eAAeA,UAAf","sourcesContent":["import {useState, useEffect } from 'react';\r\n\r\nexport const useValidation = (value, validations) => {\r\n    const [isEmpty, setEmpty] = useState(true)\r\n    const [minLengthError, setMinLengthError] = useState(false)\r\n    const [emailError, setEmailError] = useState(false)\r\n    const [inputValid, setInputValid] = useState(false)\r\n\r\n\r\n    useEffect( () => {\r\n        for (const validation in validations) {\r\n            switch (validation) {\r\n                case 'minLength':\r\n                    value.length < validations[validation] ? setMinLengthError(true) : setMinLengthError(false)\r\n                    break;\r\n                case 'isEmpty':\r\n                    value ? setEmpty(false) : setEmpty(true)\r\n                    break;\r\n                case 'isEmail':\r\n                    const re = /\\S+@\\S+\\.\\S+/;\r\n                    re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true)\r\n                    break;\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    useEffect(() => {\r\n        if (isEmpty || minLengthError || emailError)\r\n            setInputValid(false)\r\n        else {\r\n                setInputValid(true)\r\n            }\r\n    }, [isEmpty, minLengthError, emailError])\r\n\r\n    return {\r\n        isEmpty,\r\n        minLengthError,\r\n        emailError,\r\n        inputValid\r\n    }\r\n}\r\n\r\nexport const useInput = (initialValue, validations) => {\r\n    const [value, setValue] = useState(initialValue)\r\n    const [isDirty, setDirty] = useState(false)\r\n    const valid = useValidation(value, validations)\r\n\r\n    const onChange = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const onBlur = (e) => {\r\n        setDirty(true)\r\n    }\r\n\r\n    return {\r\n        value,\r\n        onChange,\r\n        onBlur,\r\n        isDirty,\r\n        ...valid\r\n    }\r\n}\r\nconst Validation = () => {\r\n    \r\n}\r\n\r\nexport default Validation;"]},"metadata":{},"sourceType":"module"}